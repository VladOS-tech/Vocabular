[{"E:\\Univer\\diplom\\project\\Vocabular\\resources\\js\\src\\main.ts":"1","E:\\Univer\\diplom\\project\\Vocabular\\resources\\js\\src\\App.vue":"2","E:\\Univer\\diplom\\project\\Vocabular\\resources\\js\\src\\router\\index.ts":"3","E:\\Univer\\diplom\\project\\Vocabular\\resources\\js\\src\\store\\index.ts":"4","E:\\Univer\\diplom\\project\\Vocabular\\resources\\js\\src\\store\\user-store.ts":"5","E:\\Univer\\diplom\\project\\Vocabular\\resources\\js\\src\\store\\login-store.ts":"6","E:\\Univer\\diplom\\project\\Vocabular\\resources\\js\\src\\store\\staff-store.ts":"7","E:\\Univer\\diplom\\project\\Vocabular\\resources\\js\\src\\components\\AdminHeader.vue":"8","E:\\Univer\\diplom\\project\\Vocabular\\resources\\js\\src\\components\\UserHeader.vue":"9","E:\\Univer\\diplom\\project\\Vocabular\\resources\\js\\src\\views\\LoginPage.vue":"10","E:\\Univer\\diplom\\project\\Vocabular\\resources\\js\\src\\views\\AdminPages\\AdministratorMain.vue":"11","E:\\Univer\\diplom\\project\\Vocabular\\resources\\js\\src\\views\\UserPages\\AddPhrasePage.vue":"12","E:\\Univer\\diplom\\project\\Vocabular\\resources\\js\\src\\views\\ModeratorPages\\ModeratorMain.vue":"13","E:\\Univer\\diplom\\project\\Vocabular\\resources\\js\\src\\views\\UserPages\\PhrasesPage.vue":"14","E:\\Univer\\diplom\\project\\Vocabular\\resources\\js\\src\\components\\Administrator\\Blocks\\StaffBlock.vue":"15","E:\\Univer\\diplom\\project\\Vocabular\\resources\\js\\src\\components\\Moderator\\Blocks\\RequestBlock.vue":"16","E:\\Univer\\diplom\\project\\Vocabular\\resources\\js\\src\\components\\Moderator\\Blocks\\PhraseBlockHolder.vue":"17","E:\\Univer\\diplom\\project\\Vocabular\\resources\\js\\src\\components\\Forms\\LoginForm.vue":"18","E:\\Univer\\diplom\\project\\Vocabular\\resources\\js\\src\\components\\Forms\\AddPhraseForm.vue":"19","E:\\Univer\\diplom\\project\\Vocabular\\resources\\js\\src\\components\\Moderator\\Blocks\\RequestItem.vue":"20","E:\\Univer\\diplom\\project\\Vocabular\\resources\\js\\src\\components\\Administrator\\Blocks\\StaffItemAdmin.vue":"21","E:\\Univer\\diplom\\project\\Vocabular\\resources\\js\\src\\components\\Misc\\SortingSelection.vue":"22","E:\\Univer\\diplom\\project\\Vocabular\\resources\\js\\src\\components\\Moderator\\Blocks\\PhraseItemModer.vue":"23","E:\\Univer\\diplom\\project\\Vocabular\\resources\\js\\src\\components\\Misc\\LoadingIcon.vue":"24","E:\\Univer\\diplom\\project\\Vocabular\\resources\\js\\src\\components\\SidePanel\\HelpBlock.vue":"25","E:\\Univer\\diplom\\project\\Vocabular\\resources\\js\\src\\components\\Blocks\\PhraseBlock.vue":"26","E:\\Univer\\diplom\\project\\Vocabular\\resources\\js\\src\\components\\Moderator\\Misc\\SortingSelectionModerator.vue":"27","E:\\Univer\\diplom\\project\\Vocabular\\resources\\js\\src\\components\\Forms\\FormComponents\\InputMeanings.vue":"28","E:\\Univer\\diplom\\project\\Vocabular\\resources\\js\\src\\components\\SidePanel\\SidebarTags.vue":"29","E:\\Univer\\diplom\\project\\Vocabular\\resources\\js\\src\\assets\\interfaces\\TagObject.ts":"30","E:\\Univer\\diplom\\project\\Vocabular\\resources\\js\\src\\components\\Forms\\FormComponents\\InputTags.vue":"31"},{"size":176,"mtime":1716906125696,"results":"32","hashOfConfig":"33"},{"size":447,"mtime":1716976751521,"results":"34","hashOfConfig":"33"},{"size":1671,"mtime":1720649732731,"results":"35","hashOfConfig":"33"},{"size":479,"mtime":1720473888761,"results":"36","hashOfConfig":"33"},{"size":6577,"mtime":1740932059615,"results":"37","hashOfConfig":"33"},{"size":538,"mtime":1720468418109,"results":"38","hashOfConfig":"33"},{"size":3041,"mtime":1720652677918,"results":"39","hashOfConfig":"33"},{"size":887,"mtime":1720653057361,"results":"40","hashOfConfig":"33"},{"size":1759,"mtime":1720299236700,"results":"41","hashOfConfig":"33"},{"size":737,"mtime":1720469564713,"results":"42","hashOfConfig":"33"},{"size":1522,"mtime":1720647000287,"results":"43","hashOfConfig":"33"},{"size":725,"mtime":1720299813838,"results":"44","hashOfConfig":"33"},{"size":2386,"mtime":1720552383980,"results":"45","hashOfConfig":"33"},{"size":1685,"mtime":1740865713170,"results":"46","hashOfConfig":"33"},{"size":1036,"mtime":1720650752212,"results":"47","hashOfConfig":"33"},{"size":1043,"mtime":1720549725440,"results":"48","hashOfConfig":"33"},{"size":1081,"mtime":1720550032228,"results":"49","hashOfConfig":"33"},{"size":1012,"mtime":1720470607644,"results":"50","hashOfConfig":"33"},{"size":3356,"mtime":1741001565393,"results":"51","hashOfConfig":"33"},{"size":1172,"mtime":1720548094486,"results":"52","hashOfConfig":"33"},{"size":2262,"mtime":1720652295819,"results":"53","hashOfConfig":"33"},{"size":2648,"mtime":1720550892478,"results":"54","hashOfConfig":"33"},{"size":1818,"mtime":1720550314445,"results":"55","hashOfConfig":"33"},{"size":349,"mtime":1717619730488,"results":"56","hashOfConfig":"33"},{"size":621,"mtime":1720298201156,"results":"57","hashOfConfig":"33"},{"size":1447,"mtime":1740842352191,"results":"58","hashOfConfig":"33"},{"size":2997,"mtime":1720551342925,"results":"59","hashOfConfig":"33"},{"size":3074,"mtime":1720378587749,"results":"60","hashOfConfig":"33"},{"size":4713,"mtime":1740946572222,"results":"61","hashOfConfig":"33"},{"size":105,"mtime":1740865167164,"results":"62","hashOfConfig":"33"},{"size":3732,"mtime":1741001374136,"results":"63","hashOfConfig":"33"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},"d8ms5s",{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"70"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"66"},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"66"},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"70"},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"70"},{"filePath":"93","messages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"70"},{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"70"},{"filePath":"103","messages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"105","messages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"107","messages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"109","messages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"113","messages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"115","messages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"117","messages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"119","messages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"121","messages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"123","messages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"125","messages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"127","messages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"129","messages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"70"},{"filePath":"132","messages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"135","messages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},"E:\\Univer\\diplom\\project\\Vocabular\\resources\\js\\src\\main.ts",[],[],"E:\\Univer\\diplom\\project\\Vocabular\\resources\\js\\src\\App.vue",["137"],"<template>\n  <router-view name=\"nav\"></router-view>\n  <router-view></router-view>\n</template>\n\n<script lang=\"ts\">\n  \nimport { defineComponent } from 'vue';\nimport store from '@/store/index';\n  export default {\n    mounted(){\n      if(window.innerWidth <= 768){\n        store.commit('setMobile', true);\n      }\n      else store.commit('setMobile', false);\n    }\n  }\n</script>\n\n<style>\n@import url(\"../src/assets/style/global-styles.css\");\n</style>\n",[],"E:\\Univer\\diplom\\project\\Vocabular\\resources\\js\\src\\router\\index.ts",[],"E:\\Univer\\diplom\\project\\Vocabular\\resources\\js\\src\\store\\index.ts",[],"E:\\Univer\\diplom\\project\\Vocabular\\resources\\js\\src\\store\\user-store.ts",["138","139","140","141","142","143","144","145"],"import { Store } from 'vuex'\nimport axios, { AxiosError } from 'axios'\n\nimport PhraseObject from \"@/assets/interfaces/PhraseObject\"\nimport TagObject from \"@/assets/interfaces/TagObject\"\nimport LoadingObject from \"@/assets/interfaces/LoadingObject\"\nimport MeaningObject from \"@/assets/interfaces/MeaningObject\"\nimport router from \"@/router\"\nimport exampleTags from \"@/assets/JSObjects/ExampleTags.json\"\n\ninterface State {\n    isMobile: boolean;\n    sortingOption: string;\n    phrasesList: PhraseObject[] | null;\n    popularTags: TagObject[] | null;\n    searchSelectedTags: TagObject[];\n    searchRecommendedTags: TagObject[];\n    isLoading: LoadingObject;\n    inputTags: Set<string>;\n    inputTagsError: string;\n    inputMeanings: MeaningObject[];\n    inputMeaningsErrors: MeaningObject[];\n    inputPhrase: string;\n    inputPhraseError: string;\n}\n\nconst state: State = {\n    isMobile: false,\n    sortingOption: '',\n    phrasesList: null,\n    popularTags: [],\n    searchSelectedTags: [],\n    searchRecommendedTags: [],\n    isLoading: { phrases: true, tags: true, inputPhrase: true },\n    inputTags: new Set(),\n    inputTagsError: '',\n    inputMeanings: [{ meaning: '', example: '' }],\n    inputMeaningsErrors: [],\n    inputPhrase: '',\n    inputPhraseError: ''\n}\n\nconst getters = {\n    isMobile: (state: State) => state.isMobile,\n    phrasesList: (state: State) => state.phrasesList,\n    sortingOption: (state: State) => state.sortingOption,\n    popularTags: (state: State) => state.popularTags,\n    searchSelectedTags: (state: State) => state.searchSelectedTags,\n    searchRecommendedTags: (state: State) => state.searchRecommendedTags,\n    isLoading: (state: State) => state.isLoading,\n    inputTagsError: (state: State) => state.inputTagsError,\n    inputMeaningsErrors: (state: State) => state.inputMeaningsErrors,\n    inputPhraseError: (state: State) => state.inputPhraseError,\n    inputTags: (state: State) => state.inputTags,\n    inputMeanings: (state: State) => state.inputMeanings,\n    inputPhrase: (state: State) => state.inputPhrase\n}\n\nconst mutations = {\n    setState<T>(state: State, { key, value }: { key: keyof State, value: T }) {\n        state[key] = value as never\n    },\n    setLoading(state: State, { whichLoading, newLoading }: { whichLoading: keyof LoadingObject, newLoading: boolean }) {\n        state.isLoading[whichLoading] = newLoading\n    },\n    setPopularTags(state: State, tags :TagObject[]){\n        state.popularTags = tags;\n    },\n    setSearchSelectedTags(state: State, tags :TagObject[]){\n        state.searchSelectedTags = tags;\n    },\n    addSearchSelectedTag(state: State, tag :TagObject){\n        state.searchSelectedTags.push(tag);\n    },\n    removeSearchSelectedTag(state: State, tag :TagObject){\n        state.searchSelectedTags = state.searchSelectedTags.filter(selectedtag => selectedtag.id !== tag.id)\n    },\n    setSearchRecommendedTags(state: State, tags :TagObject[]){\n        state.searchRecommendedTags = tags;\n    }\n}\n\nconst actions = {\n    async UserPageLoadAllInfo({ dispatch }: { dispatch: any }) {\n        await Promise.all([dispatch('GetPopularTags'), dispatch('GetPhrasesInfo')])\n    },\n    async GetSearchRecommendedTags({commit }: {commit: any}, searchText: string){\n        //Api request for tags\n        commit('setSearchRecommendedTags', exampleTags)\n    },\n    async GetPopularTags({ commit }: { commit: any }) {\n        commit('setLoading', { whichLoading: 'tags', newLoading: true })\n        // try {\n        //     const { data } = await axios.get('http://127.0.0.1:8000/api/tags')\n        //     commit('setState', { key: 'popularTags', value: data })\n        // } catch (error) {\n        //     console.error('Ошибка при загрузке тегов:', error)\n        // } finally {\n            commit('setPopularTags', {tags: exampleTags})\n            commit('setLoading', { whichLoading: 'tags', newLoading: false })\n        // }\n    },\n\n    async GetPhrasesInfo({ commit }: { commit: any }) {\n        commit('setLoading', { whichLoading: 'phrases', newLoading: true })\n        try {\n            const { data } = await axios.get('http://127.0.0.1:8000/api/phraseologies')\n            commit('setState', { key: 'phrasesList', value: data })\n        } catch (error) {\n            console.error('Ошибка при загрузке фразеологизмов:', error)\n        } finally {\n            commit('setLoading', { whichLoading: 'phrases', newLoading: false })\n        }\n    },\n\n    async CheckPhraseInput({ state, commit }: { state: State, commit: any }) {\n         const valid = true\n\n        // Валидация полей\n        commit('setState', { key: 'inputPhraseError', value: state.inputPhrase ? '' : 'Вы не ввели фразеологизм' })\n        commit('setState', { key: 'inputTagsError', value: state.inputTags.size ? '' : 'Вы не добавили ни одного тега' })\n\n        const inputMeaningsErrors = state.inputMeanings.map(m => ({\n            meaning: m.meaning ? '' : 'Заполните поле значения',\n            example: m.example ? '' : 'Заполните поле примера'\n        }))\n\n        if (!state.inputPhrase || !state.inputTags.size || inputMeaningsErrors.some(m => m.meaning || m.example)) {\n            commit('setState', { key: 'inputMeaningsErrors', value: inputMeaningsErrors })\n            return\n        }\n\n        // Отправка данных\n        commit('setLoading', { whichLoading: 'inputPhrase', newLoading: true })\n        try {\n            await axios.post('http://127.0.0.1:8000/api/phraseologies', {\n                phrase: state.inputPhrase,\n                meanings: state.inputMeanings,\n                tags: Array.from(state.inputTags)\n            })\n            console.log('✅ Фразеологизм добавлен')\n\n            // Очистка формы\n            commit('setState', { key: 'inputPhrase', value: '' })\n            commit('setState', { key: 'inputMeanings', value: [{ meaning: '', example: '' }] })\n            commit('setState', { key: 'inputTags', value: new Set() })\n\n            router.push('/')\n        } catch (error: unknown) {\n            const axiosError = error as AxiosError\n            console.error('❌ Ошибка при отправке:', axiosError)\n            if (axiosError.response) console.error('Ответ сервера:', axiosError.response.data)\n        } finally {\n            commit('setLoading', { whichLoading: 'inputPhrase', newLoading: false })\n        }\n    }\n}\n\nexport default { state, getters, mutations, actions }\n","E:\\Univer\\diplom\\project\\Vocabular\\resources\\js\\src\\store\\login-store.ts",[],"E:\\Univer\\diplom\\project\\Vocabular\\resources\\js\\src\\store\\staff-store.ts",["146","147","148"],"import PhraseObject from \"@/assets/interfaces/PhraseObject\"\r\nimport StaffObject from \"@/assets/interfaces/StaffObject\"\r\n\r\nimport ExampleRequests from '@/assets/JSObjects/ExamplePhrases.json'\r\nimport ExampleStaff from '@/assets/JSObjects/ExampleStaff.json'\r\n\r\ninterface State {\r\n    name: string,\r\n    tabName: string,\r\n    requestList: PhraseObject[] | null,\r\n    staffList: StaffObject[] | null,\r\n    requestLoading: boolean,\r\n    phraseLoading: boolean,\r\n    staffLoading: boolean\r\n}\r\n\r\nconst state: State = {\r\n    name: 'Артемий Грищенко',\r\n    tabName: '',\r\n    requestList: null,\r\n    staffList: null,\r\n    requestLoading: true,\r\n    phraseLoading: true,\r\n    staffLoading: true\r\n}\r\n\r\nconst getters = {\r\n    name(state: State){\r\n        return state.name\r\n    },\r\n    tabName(state: State){\r\n        return state.tabName\r\n    },\r\n    requestList(state: State) {\r\n        return state.requestList\r\n    },\r\n    staffList(state: State) {\r\n        return state.staffList\r\n    },\r\n    requestLoading(state: State){\r\n        return state.requestLoading\r\n    },\r\n    phraseLoading(state: State){\r\n        return state.phraseLoading\r\n    },\r\n    staffLoading(state: State){\r\n        return state.staffLoading\r\n    },\r\n}\r\n\r\nconst mutations = {\r\n    setName(state: State, newName: string){\r\n        state.name = newName\r\n    },\r\n    setTabName(state: State, newTabName: string){\r\n        state.tabName = newTabName\r\n    },\r\n    setRequestList(state: State, newList: PhraseObject[]) {\r\n        state.requestList = newList\r\n    },\r\n    setStaffList(state: State, newList: StaffObject[]) {\r\n        state.staffList = newList\r\n    },\r\n    setRequestLoading(state: State, newLoading: boolean){\r\n        state.requestLoading = newLoading\r\n    },\r\n    setPhraseLoading(state: State, newLoading: boolean){\r\n        state.phraseLoading = newLoading\r\n    },\r\n    setStaffLoading(state: State, newLoading: boolean){\r\n        state.staffLoading = newLoading\r\n    }\r\n}\r\n\r\nconst actions = {\r\n    async GetRequestsInfo({commit}: {commit: any}) {\r\n        commit('setRequestList', null)\r\n        commit('setRequestLoading', true)\r\n        await new Promise(resolve => {\r\n            setTimeout(resolve, 2000)\r\n        })\r\n        commit('setRequestList', ExampleRequests)\r\n        commit('setRequestLoading', false)\r\n    },\r\n    async GetPhraseInfoModerator({commit}: {commit: any}) {\r\n        commit('setPhraseLoading', true)\r\n        commit('setPhraseList', null)\r\n        await new Promise(resolve => {\r\n            setTimeout(resolve, 2000)\r\n        })\r\n        commit('setPhraseList', ExampleRequests)\r\n        commit('setPhraseLoading', false)\r\n    },\r\n    async GetStaffInfoAdministrator({commit}: {commit: any}) {\r\n        commit('setStaffLoading', true)\r\n        commit('setStaffList', null)\r\n        await new Promise(resolve => {\r\n            setTimeout(resolve, 2000)\r\n        })\r\n        commit('setStaffList', ExampleStaff)\r\n        commit('setStaffLoading', false)\r\n    },\r\n}\r\n\r\nexport default { state, getters, mutations, actions }","E:\\Univer\\diplom\\project\\Vocabular\\resources\\js\\src\\components\\AdminHeader.vue",["149"],"<template>\r\n    <header class=\"light-header-colors header-class\">\r\n        <router-link to=\"/\" class=\"link-style\">\r\n            <h1>\r\n                {{ pageName }}\r\n            </h1>\r\n        </router-link>\r\n        <div class=\"header-name-block\">\r\n            <div class=\"header-name\">\r\n                {{ name }}\r\n            </div>\r\n            <div class=\"button button-large logout-button\">\r\n                <img src=\"@/assets/images/icons/logout-icon.svg\" alt=\"logout\">\r\n            </div>\r\n        </div>\r\n    </header>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\n    import { defineComponent } from 'vue';\r\n    import { mapGetters, mapActions } from 'vuex';\r\n\r\n    export default defineComponent({\r\n        computed:{\r\n            ...mapGetters(['name', 'pageName'])\r\n        }\r\n    }) \r\n</script>\r\n\r\n<style scoped>\r\n    @import url('@/assets/style/headers/admin-header.css');\r\n</style>","E:\\Univer\\diplom\\project\\Vocabular\\resources\\js\\src\\components\\UserHeader.vue",[],"E:\\Univer\\diplom\\project\\Vocabular\\resources\\js\\src\\views\\LoginPage.vue",[],"E:\\Univer\\diplom\\project\\Vocabular\\resources\\js\\src\\views\\AdminPages\\AdministratorMain.vue",["150"],"<template>\r\n    <div class=\"admin-main-grid\">\r\n        <div class=\"sort-area\">\r\n                <form action=\"-IDK-\" class=\"search-block\">\r\n                <input id=\"search-field-moderator-id\" type=\"text\" class=\"admin-search-field admin-search-field-light\" placeholder=\"Поиск\" v-model=\"searchInput\"/>\r\n                <label for=\"search-field-moderator-id\">\r\n                    <img src=\"@/assets/images/icons/search-icon.svg\" alt=\"search-icon\" class=\"search-icon-header search-icon-header-light\">\r\n                </label>\r\n            </form>\r\n        </div>\r\n        <div class=\"tabs-area\">\r\n            <div class=\"tab-style tab-button\" to=\"/admin/staff\">Персонал</div>\r\n        </div>\r\n        <div class=\"request-area\">\r\n            <router-view/>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\n\r\nimport { defineComponent } from 'vue'\r\nimport { mapGetters, mapMutations } from 'vuex';\r\n\r\nexport default defineComponent({\r\n\r\n        data() {\r\n            return{\r\n                pageName: 'Администрация' as string,\r\n                searchInput: '' as string\r\n            }\r\n        },\r\n        methods:{\r\n            ...mapMutations(['setPageName', 'setTabName'])\r\n        },\r\n        mounted(){\r\n\r\n            // Перенести в компоненте переназначение тега\r\n\r\n            this.setPageName(this.pageName)\r\n        }\r\n})\r\n\r\n</script>\r\n\r\n<style scoped>\r\n    @import url('@/assets/style/administrator/administrator-main.css');\r\n</style>","E:\\Univer\\diplom\\project\\Vocabular\\resources\\js\\src\\views\\UserPages\\AddPhrasePage.vue",[],"E:\\Univer\\diplom\\project\\Vocabular\\resources\\js\\src\\views\\ModeratorPages\\ModeratorMain.vue",[],"E:\\Univer\\diplom\\project\\Vocabular\\resources\\js\\src\\views\\UserPages\\PhrasesPage.vue",["151"],"<template>\n    <div class=\"phrases-page-main-grid\">\n        <div class=\"sort-area\">\n            <sortingSelection />\n        </div>\n        <!-- Add loading and load phrases from array -->\n        <loadingIcon v-if=\"isLoading.phrases\" />\n        <div class=\"phrase-area\" v-else>\n            <phraseBlock v-for=\"phrase in phrasesList\" :key=\"phrase.id\" :PhraseData=\"phrase\" />\n        </div>\n        <div class=\"sidebar-area\">\n            <helpBlock />\n            <SidebarTags/>\n        </div>\n    </div>\n</template>\n\n<script lang=\"ts\">\nimport sortingSelection from '@/components/Misc/SortingSelection.vue'\nimport phraseBlock from '@/components/Blocks/PhraseBlock.vue';\nimport helpBlock from '@/components/SidePanel/HelpBlock.vue';\nimport SidebarTags from '@/components/SidePanel/SidebarTags.vue';\nimport loadingIcon from '@/components/Misc/LoadingIcon.vue';\nimport { defineComponent } from 'vue';\nimport { mapMutations, mapState, mapActions, mapGetters } from 'vuex';\n\nexport default defineComponent({\n    components:{\n        sortingSelection,\n        phraseBlock,\n        helpBlock,\n        SidebarTags,\n        loadingIcon\n    },\n    data(){\n        return{\n            pageName: 'Словарь Фразеологизмов' as string\n        }\n    },\n    computed:{\n        ...mapGetters(['isLoading', 'phrasesList', 'SidebarTags']),\n    },\n    methods:{\n        ...mapMutations(['setPageName']),\n        ...mapActions(['GetPhrasesInfo', 'UserPageLoadAllInfo'])\n    },beforeMount(){\n        this.UserPageLoadAllInfo()\n    },\n    mounted(){\n        this.setPageName(this.pageName)\n    },\n})\n</script>\n\n<style scoped>\n@import url('@/assets/style/pages/phrases-screen.css');\n</style>","E:\\Univer\\diplom\\project\\Vocabular\\resources\\js\\src\\components\\Administrator\\Blocks\\StaffBlock.vue",["152"],"<template>\r\n    <div class=\"request-block\">\r\n        <loadingIcon v-if=\"staffLoading\" />\r\n        <staffItemAdmin v-for=\"staff in staffList\" :key=\"staff.id\" :StaffData=\"staff\" />\r\n    </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent } from 'vue';\r\nimport staffItemAdmin from './StaffItemAdmin.vue';\r\nimport LoadingIcon from '@/components/Misc/LoadingIcon.vue';\r\nimport { mapActions, mapGetters, mapMutations } from 'vuex';\r\n\r\n    export default defineComponent({\r\n        components:{\r\n            staffItemAdmin,\r\n            LoadingIcon\r\n        },\r\n        computed:{\r\n            ...mapGetters(['staffLoading', 'staffList'])\r\n        },\r\n        methods:{\r\n            // ...mapMutations(['setTabName']),\r\n            ...mapActions(['GetStaffInfoAdministrator'])\r\n        },\r\n        mounted(){\r\n            // this.setTabName('phrases')\r\n            this.GetStaffInfoAdministrator()\r\n        }\r\n    })\r\n</script>\r\n\r\n<style scoped>\r\n    @import url('@/assets/style/moderator/elements/requests.css');\r\n</style>\r\n\r\n","E:\\Univer\\diplom\\project\\Vocabular\\resources\\js\\src\\components\\Moderator\\Blocks\\RequestBlock.vue",[],"E:\\Univer\\diplom\\project\\Vocabular\\resources\\js\\src\\components\\Moderator\\Blocks\\PhraseBlockHolder.vue",[],"E:\\Univer\\diplom\\project\\Vocabular\\resources\\js\\src\\components\\Forms\\LoginForm.vue",[],"E:\\Univer\\diplom\\project\\Vocabular\\resources\\js\\src\\components\\Forms\\AddPhraseForm.vue",[],"E:\\Univer\\diplom\\project\\Vocabular\\resources\\js\\src\\components\\Moderator\\Blocks\\RequestItem.vue",[],"E:\\Univer\\diplom\\project\\Vocabular\\resources\\js\\src\\components\\Administrator\\Blocks\\StaffItemAdmin.vue",[],"E:\\Univer\\diplom\\project\\Vocabular\\resources\\js\\src\\components\\Misc\\SortingSelection.vue",[],"E:\\Univer\\diplom\\project\\Vocabular\\resources\\js\\src\\components\\Moderator\\Blocks\\PhraseItemModer.vue",[],"E:\\Univer\\diplom\\project\\Vocabular\\resources\\js\\src\\components\\Misc\\LoadingIcon.vue",[],"E:\\Univer\\diplom\\project\\Vocabular\\resources\\js\\src\\components\\SidePanel\\HelpBlock.vue",[],"E:\\Univer\\diplom\\project\\Vocabular\\resources\\js\\src\\components\\Blocks\\PhraseBlock.vue",[],"E:\\Univer\\diplom\\project\\Vocabular\\resources\\js\\src\\components\\Moderator\\Misc\\SortingSelectionModerator.vue",[],"E:\\Univer\\diplom\\project\\Vocabular\\resources\\js\\src\\components\\Forms\\FormComponents\\InputMeanings.vue",[],"E:\\Univer\\diplom\\project\\Vocabular\\resources\\js\\src\\components\\SidePanel\\SidebarTags.vue",["153"],"<template>\n    <div class=\"popular-tags-block popular-tags-block-light\">\n        <h3>\n            Популярные теги\n        </h3>\n        <!-- make togglable tags(and dispatch event) + hide this menu on mobile and load popular tags via action -->\n        <loadingIcon v-if=\"isLoading.tags\" />\n        <div class=\"tags-block\" v-else>\n            <div class=\"tag tag-button tag-highlighted\" v-for=\"tag in unselectedPopularTags\" :key=\"tag.id\" @:click=\"selectTag(tag)\"> {{ tag.name }}</div>\n        </div>\n        <div class=\"tag-search-input-area\">\n            <input type=\"text\" class=\"input-field input-field-regular\" v-model=\"tagSearch\" ref=\"tagSearchInputField\" placeholder=\"Введите желаемый тег:\" @input=\"toggleTagSelector\" @keyup=\"closeTagSelector\">\n            <ul class=\"tag-selector-list\" v-if=\"showTagSelector\">\n                <li class=\"tag-selector-list-element button\" v-for=\"tag in unselectedRecommendedTags\" :key=\"tag.id\" @click=\"selectTag(tag); selectTagViaSearch();\">\n                    <div class=\"tag-search-inline\">\n                    {{ tag.name }}\n                    </div>\n                    <div class=\"tag-search-inline\">\n                        {{ tag.timesUsed }}\n                    </div>\n                </li>\n            </ul>\n        </div>\n        <h4>\n            Выбрано:\n        </h4>\n        <div v-if=\"searchSelectedTags.length > 0\" class=\"tags-block\">\n            <div class=\"tag tag-generic tag-editable\" @click.stop v-for=\"tag in searchSelectedTags\" :key=\"tag.id\">\n                {{ tag.name }}\n                <button class=\"button remove-tag-button\" @click=\"unselectTag(tag)\">\n                    x\n                </button>\n            </div>\n            \n        </div>\n        <div v-else>-   </div>\n        <div class=\"button button-large button-side\" @click=\"GetPhrasesInfo()\">\n            Применить\n        </div>\n    </div>    \n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, PropType } from 'vue';\nimport loadingIcon from '../Misc/LoadingIcon.vue';\nimport TagObject from '@/assets/interfaces/TagObject';\nimport { mapGetters, mapActions, mapMutations } from 'vuex';\n\n    export default defineComponent({\n        data() {\n            return{\n                tagSearch: '' as string,\n                showTagSelector: false as boolean\n            }\n        },\n        components:{\n            loadingIcon\n        },\n        computed:{\n            ...mapGetters(['isLoading', 'popularTags', 'searchSelectedTags', 'searchRecommendedTags']),\n            unselectedPopularTags(): TagObject[]{\n                return (this.popularTags.tags || []).filter((tag: TagObject) => !(this.searchSelectedTags || []).some((selectedTag: TagObject) => selectedTag.id === tag.id))\n            },\n            unselectedRecommendedTags(): TagObject[]{\n                return (this.searchRecommendedTags || []).filter((tag: TagObject) => !(this.searchSelectedTags || []).some((selectedTag: TagObject) => selectedTag.id === tag.id))\n            }\n        },\n        methods:{\n            ...mapActions(['GetPhrasesInfo', 'GetSearchRecommendedTags']),\n            ...mapMutations(['setSearchSelectedTags', 'addSearchSelectedTag', 'removeSearchSelectedTag']),\n            selectTag(tag: TagObject){\n                this.addSearchSelectedTag(tag)\n            },\n            selectTagViaSearch(){\n                (this.$refs.tagSearchInputField as HTMLInputElement).blur()\n                this.tagSearch = ''\n                this.showTagSelector = false;\n            },\n            unselectTag(tag: TagObject){\n                this.removeSearchSelectedTag(tag)\n            },\n            async toggleTagSelector(){\n                if(this.tagSearch.length >= 3){\n                    await this.GetSearchRecommendedTags(this.tagSearch)\n                    if(this.unselectedRecommendedTags.length > 0) this.showTagSelector = true;\n                }else{\n                    this.showTagSelector = false;\n                }\n            },\n            closeTagSelector(e: KeyboardEvent){\n                if(e.key === 'Enter' || e.key === 'Escape'){\n                    if(e.key == 'Enter'){\n                    let firstTag = this.unselectedRecommendedTags[0]\n                    if (firstTag) {\n                        this.selectTag(firstTag)\n                    }\n                }\n                (e.target as HTMLInputElement).blur()\n                this.tagSearch = ''\n                this.showTagSelector = false;\n                }\n            }\n        }\n    })\n</script>\n\n<style scoped>\n    @import url('@/assets/style/elements/popular-tags.css');\n    @import url('@/assets/style/forms/form-components/input-tags.css');\n</style>","E:\\Univer\\diplom\\project\\Vocabular\\resources\\js\\src\\assets\\interfaces\\TagObject.ts",[],[],"E:\\Univer\\diplom\\project\\Vocabular\\resources\\js\\src\\components\\Forms\\FormComponents\\InputTags.vue",[],{"ruleId":"154","severity":1,"message":"155","line":8,"column":10,"nodeType":"156","messageId":"157","endLine":8,"endColumn":25},{"ruleId":"154","severity":1,"message":"158","line":1,"column":10,"nodeType":"156","messageId":"157","endLine":1,"endColumn":15},{"ruleId":"159","severity":1,"message":"160","line":84,"column":57,"nodeType":"161","messageId":"162","endLine":84,"endColumn":60,"suggestions":"163"},{"ruleId":"159","severity":1,"message":"160","line":87,"column":56,"nodeType":"161","messageId":"162","endLine":87,"endColumn":59,"suggestions":"164"},{"ruleId":"154","severity":1,"message":"165","line":87,"column":62,"nodeType":"156","messageId":"157","endLine":87,"endColumn":80},{"ruleId":"159","severity":1,"message":"160","line":91,"column":48,"nodeType":"161","messageId":"162","endLine":91,"endColumn":51,"suggestions":"166"},{"ruleId":"159","severity":1,"message":"160","line":104,"column":48,"nodeType":"161","messageId":"162","endLine":104,"endColumn":51,"suggestions":"167"},{"ruleId":"159","severity":1,"message":"160","line":116,"column":71,"nodeType":"161","messageId":"162","endLine":116,"endColumn":74,"suggestions":"168"},{"ruleId":"154","severity":1,"message":"169","line":117,"column":16,"nodeType":"156","messageId":"157","endLine":117,"endColumn":21},{"ruleId":"159","severity":1,"message":"160","line":76,"column":46,"nodeType":"161","messageId":"162","endLine":76,"endColumn":49,"suggestions":"170"},{"ruleId":"159","severity":1,"message":"160","line":85,"column":53,"nodeType":"161","messageId":"162","endLine":85,"endColumn":56,"suggestions":"171"},{"ruleId":"159","severity":1,"message":"160","line":94,"column":56,"nodeType":"161","messageId":"162","endLine":94,"endColumn":59,"suggestions":"172"},{"ruleId":"154","severity":1,"message":"173","line":21,"column":26,"nodeType":"156","messageId":"157","endLine":21,"endColumn":36},{"ruleId":"154","severity":1,"message":"174","line":23,"column":10,"nodeType":"156","messageId":"157","endLine":23,"endColumn":20},{"ruleId":"154","severity":1,"message":"175","line":25,"column":24,"nodeType":"156","messageId":"157","endLine":25,"endColumn":32},{"ruleId":"154","severity":1,"message":"176","line":12,"column":34,"nodeType":"156","messageId":"157","endLine":12,"endColumn":46},{"ruleId":"154","severity":1,"message":"177","line":44,"column":27,"nodeType":"156","messageId":"157","endLine":44,"endColumn":35},"@typescript-eslint/no-unused-vars","'defineComponent' is defined but never used.","Identifier","unusedVar","'Store' is defined but never used.","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["178","179"],["180","181"],"'searchText' is defined but never used.",["182","183"],["184","185"],["186","187"],"'valid' is assigned a value but never used.",["188","189"],["190","191"],["192","193"],"'mapActions' is defined but never used.","'mapGetters' is defined but never used.","'mapState' is defined but never used.","'mapMutations' is defined but never used.","'PropType' is defined but never used.",{"messageId":"194","fix":"195","desc":"196"},{"messageId":"197","fix":"198","desc":"199"},{"messageId":"194","fix":"200","desc":"196"},{"messageId":"197","fix":"201","desc":"199"},{"messageId":"194","fix":"202","desc":"196"},{"messageId":"197","fix":"203","desc":"199"},{"messageId":"194","fix":"204","desc":"196"},{"messageId":"197","fix":"205","desc":"199"},{"messageId":"194","fix":"206","desc":"196"},{"messageId":"197","fix":"207","desc":"199"},{"messageId":"194","fix":"208","desc":"196"},{"messageId":"197","fix":"209","desc":"199"},{"messageId":"194","fix":"210","desc":"196"},{"messageId":"197","fix":"211","desc":"199"},{"messageId":"194","fix":"212","desc":"196"},{"messageId":"197","fix":"213","desc":"199"},"suggestUnknown",{"range":"214","text":"215"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"214","text":"216"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"217","text":"215"},{"range":"217","text":"216"},{"range":"218","text":"215"},{"range":"218","text":"216"},{"range":"219","text":"215"},{"range":"219","text":"216"},{"range":"220","text":"215"},{"range":"220","text":"216"},{"range":"221","text":"215"},{"range":"221","text":"216"},{"range":"222","text":"215"},{"range":"222","text":"216"},{"range":"223","text":"215"},{"range":"223","text":"216"},[3039,3042],"unknown","never",[3194,3197],[3362,3365],[3936,3939],[4478,4481],[2018,2021],[2356,2359],[2693,2696]]